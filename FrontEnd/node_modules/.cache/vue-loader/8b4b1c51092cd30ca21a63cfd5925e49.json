{"remainingRequest":"D:\\MISA\\DemoVue\\my_app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\MISA\\DemoVue\\my_app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\MISA\\DemoVue\\my_app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MISA\\DemoVue\\my_app\\src\\components\\Views\\DialogDetailEmployee.vue?vue&type=template&id=050e60d8&","dependencies":[{"path":"D:\\MISA\\DemoVue\\my_app\\src\\components\\Views\\DialogDetailEmployee.vue","mtime":1611757226905},{"path":"D:\\MISA\\DemoVue\\my_app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MISA\\DemoVue\\my_app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\MISA\\DemoVue\\my_app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MISA\\DemoVue\\my_app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}